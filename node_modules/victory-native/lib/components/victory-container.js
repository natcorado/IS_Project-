"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VictoryContainer = void 0;
var _get2 = _interopRequireDefault(require("lodash/get"));
var _react = _interopRequireDefault(require("react"));
var _reactNativeSvg = _interopRequireWildcard(require("react-native-svg"));
var _reactNative = require("react-native");
var _es = require("victory-core/es");
var _nativeHelpers = _interopRequireDefault(require("../helpers/native-helpers"));
var _portal = require("./victory-portal/portal");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const yes = () => true;
const no = () => false;
const VictoryContainer = initialProps => {
  const props = (0, _es.useVictoryContainer)(initialProps);
  const {
    title,
    desc,
    width,
    height,
    dimensions,
    children,
    style,
    ouiaId,
    ouiaSafe,
    ouiaType,
    ariaLabelledBy,
    ariaDescribedBy,
    portalZIndex,
    viewBox,
    preserveAspectRatio,
    userProps,
    containerRef,
    events,
    onTouchStart,
    onTouchEnd,
    localContainerRef,
    disableContainerEvents
  } = props;
  const callOptionalEventCallback = (eventName, event) => {
    const callback = (0, _get2.default)(events, eventName);
    if (callback) {
      event.persist(); // RN nativeEvent is reused. see https://fb.me/react-event-pooling
      callback(event, props, "__unknownEventKey__", eventName);
    }
  };
  const handleResponderGrant = event => {
    if (onTouchStart) {
      onTouchStart(event);
    }
    callOptionalEventCallback("onTouchStart", event);
  };
  const handleResponderMove = event => {
    const {
      touches
    } = event.nativeEvent;
    if (touches && touches.length === 2) {
      callOptionalEventCallback("onTouchPinch", event);
    } else {
      callOptionalEventCallback("onTouchMove", event);
    }
  };
  const handleResponderEnd = event => {
    if (onTouchEnd) {
      onTouchEnd(event);
    }
    callOptionalEventCallback("onTouchEnd", event);
  };
  const getResponder = () => {
    let shouldBlockNativeResponder = no;
    const {
      allowDrag,
      allowDraw,
      allowResize,
      allowSelection,
      allowPan,
      allowZoom
    } = props;
    if (allowDrag || allowDraw || allowResize || allowSelection || allowPan || allowZoom) {
      shouldBlockNativeResponder = yes;
    }
    return _reactNative.PanResponder.create({
      onStartShouldSetPanResponder: yes,
      onStartShouldSetPanResponderCapture: no,
      onMoveShouldSetPanResponder: yes,
      onMoveShouldSetPanResponderCapture: yes,
      onShouldBlockNativeResponder: shouldBlockNativeResponder,
      onPanResponderTerminationRequest: yes,
      onPanResponderGrant: handleResponderGrant,
      // User has started a touch move
      onPanResponderMove: handleResponderMove,
      // Active touch or touches have moved
      onPanResponderRelease: handleResponderEnd,
      // The user has released all touches
      onPanResponderTerminate: handleResponderEnd // Another component has become the responder
    });
  };
  const panResponder = getResponder();
  const handlers = disableContainerEvents ? {} : panResponder.panHandlers;
  const baseStyle = _nativeHelpers.default.getStyle(style, ["width", "height"]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({}, handlers, {
    style: {
      ...baseStyle,
      position: "relative"
    },
    pointerEvents: "box-none",
    "data-ouia-component-id": ouiaId,
    "data-ouia-component-type": ouiaType,
    "data-ouia-safe": ouiaSafe,
    ref: (0, _es.mergeRefs)([localContainerRef, containerRef])
  }), /*#__PURE__*/_react.default.createElement(_reactNativeSvg.default, _extends({
    width: width,
    height: height,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    viewBox: viewBox,
    preserveAspectRatio: preserveAspectRatio
    // @ts-expect-error - style prop does not seem to be recognized by react-native-svg
    // preserved during refactor for compatibility, if it ever worked
    ,
    style: dimensions,
    accessible: ariaLabelledBy && title ? true : undefined,
    accessibilityLabel: ariaLabelledBy && title ? title : undefined,
    accessibilityHint: ariaDescribedBy && desc ? desc : undefined
  }, events, userProps), /*#__PURE__*/_react.default.createElement(_reactNativeSvg.Rect, {
    x: 0,
    y: 0,
    width: width,
    height: height,
    fill: "none"
  }), title ? /*#__PURE__*/_react.default.createElement("title", {
    id: "title"
  }, title) : null, desc ? /*#__PURE__*/_react.default.createElement("desc", {
    id: "desc"
  }, desc) : null, /*#__PURE__*/_react.default.createElement(_es.PortalProvider, null, children, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      zIndex: portalZIndex,
      position: "absolute",
      top: 0,
      left: 0
    },
    pointerEvents: "box-none"
  }, /*#__PURE__*/_react.default.createElement(_es.PortalOutlet, {
    as: /*#__PURE__*/_react.default.createElement(_portal.Portal, null),
    width: width,
    height: height,
    viewBox: viewBox,
    style: {
      ...dimensions,
      overflow: "visible"
    }
  })))));
};
exports.VictoryContainer = VictoryContainer;
VictoryContainer.role = "container";