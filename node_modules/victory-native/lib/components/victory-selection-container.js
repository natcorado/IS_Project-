"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VictorySelectionContainer = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNativeSvg = require("react-native-svg");
var _victorySelectionContainer = require("victory-selection-container");
var _victoryContainer = require("./victory-container");
var _nativeHelpers = _interopRequireDefault(require("../helpers/native-helpers"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /* eslint-disable react/no-multi-comp */
// ensure the selection component get native styles
const DefaultSelectionComponent = _ref => {
  let {
    style = {},
    ...otherProps
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_reactNativeSvg.Rect, _extends({}, otherProps, _nativeHelpers.default.getStyle(style)));
};
const VictorySelectionContainer = initialProps => {
  const props = (0, _victorySelectionContainer.useVictorySelectionContainer)({
    ...initialProps,
    // @ts-expect-error TODO: standalone is not a valid prop for VictoryContainer, figure out why this is here
    standalone: initialProps.standalone ?? true,
    selectionComponent: initialProps.selectionComponent ?? /*#__PURE__*/_react.default.createElement(DefaultSelectionComponent, null)
  });
  return /*#__PURE__*/_react.default.createElement(_victoryContainer.VictoryContainer, props);
};
exports.VictorySelectionContainer = VictorySelectionContainer;
VictorySelectionContainer.role = "container";
VictorySelectionContainer.defaultEvents = initialProps => {
  const props = {
    ..._victorySelectionContainer.VICTORY_SELECTION_CONTAINER_DEFAULT_PROPS,
    ...initialProps
  };
  const createEventHandler = (handler, cancel) =>
  // eslint-disable-next-line max-params
  (event, targetProps, eventKey, context) => {
    if (props.disable) {
      return {};
    }
    if (cancel) {
      _victorySelectionContainer.SelectionHelpers.onMouseMove.cancel();
    }
    return handler(event, {
      ...props,
      ...targetProps
    }, eventKey, context);
  };
  return [{
    target: "parent",
    eventHandlers: {
      onTouchStart: createEventHandler(_victorySelectionContainer.SelectionHelpers.onMouseMove, true),
      onTouchMove: createEventHandler(_victorySelectionContainer.SelectionHelpers.onMouseMove, false),
      onTouchEnd: createEventHandler(_victorySelectionContainer.SelectionHelpers.onMouseUp, true)
    }
  }];
};